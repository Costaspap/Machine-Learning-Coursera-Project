injuries = aggregate(INJURIES ~ EVTYPE, FUN = sum, data = tidy_data)
fatalities = aggregate(FATALITIES ~ EVTYPE, FUN = sum, data = tidy_data)
cost = aggregate(PROPDAMAGE+CROPDAMAGE ~ EVTYPE, FUN = sum, data = tidy_data)
injuries = injuries[order(injuries$Injuries,decreasing = TRUE),]
fatalities = fatalities[order(fatalities$Fatalities,decreasing = TRUE),]
cost = cost[order(cost$Damage,decreasing = TRUE),]
names(cost) = c("Event_Type","Damage")
names(injuries) = c("Event_Type","Injuries")
names(fatalities) = c("Event_Type","Fatalities")
injuries = injuries[order(injuries$Injuries,decreasing = TRUE),]
fatalities = fatalities[order(fatalities$Fatalities,decreasing = TRUE),]
cost = cost[order(cost$Damage,decreasing = TRUE),]
injuries = injuries[1:10,]
fatalities = fatalities[1:10,]
cost = cost[1:10,]
injuries_plot = ggplot(injuries, aes(y=Injuries,x=Event_Type)) +
geom_bar(stat = "identity", fill = "blue") +
xlab("Event Type") + ylab("Total Damage in U.S. Dollars") +
ggtitle("Top Ten Weather Events that caused Injuries") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
injuries_plot
injuries
injuries = aggregate(INJURIES ~ EVTYPE, FUN = sum, data = tidy_data)
fatalities = aggregate(FATALITIES ~ EVTYPE, FUN = sum, data = tidy_data)
cost = aggregate(PROPDAMAGE+CROPDAMAGE ~ EVTYPE, FUN = sum, data = tidy_data)
names(cost) = c("Event_Type","Damage")
names(injuries) = c("Event_Type","Injuries")
names(fatalities) = c("Event_Type","Fatalities")
injuries = injuries[order(injuries$Injuries,decreasing = TRUE),][1:10,]
fatalities = fatalities[order(fatalities$Fatalities,decreasing = TRUE),][1:10,]
cost = cost[order(cost$Damage,decreasing = TRUE),][1:10,]
injuries
injuries = as.factor(injuries)
fatalities = as.factor(fatalities)
cost = as.factor(cost)
injuries = aggregate(INJURIES ~ EVTYPE, FUN = sum, data = tidy_data)
fatalities = aggregate(FATALITIES ~ EVTYPE, FUN = sum, data = tidy_data)
cost = aggregate(PROPDAMAGE+CROPDAMAGE ~ EVTYPE, FUN = sum, data = tidy_data)
names(cost) = c("Event_Type","Damage")
names(injuries) = c("Event_Type","Injuries")
names(fatalities) = c("Event_Type","Fatalities")
injuries = injuries[order(injuries$Injuries,decreasing = TRUE),][1:10,]
fatalities = fatalities[order(fatalities$Fatalities,decreasing = TRUE),][1:10,]
cost = cost[order(cost$Damage,decreasing = TRUE),][1:10,]
injuries = as.factor(injuries$Event_Type)
fatalities = as.factor(fatalities$Event_Type)
cost = as.factor(cost$Event_Type)
injuries_plot = ggplot(injuries, aes(y=Injuries,x=Event_Type)) +
geom_bar(stat = "identity", fill = "blue") +
xlab("Event Type") + ylab("Total Damage in U.S. Dollars") +
ggtitle("Top Ten Weather Events that caused Injuries") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
injuries_plot = ggplot(injuries, aes(y=Injuries,x=factor(Event_Type))) +
geom_bar(stat = "identity", fill = "blue") +
xlab("Event Type") + ylab("Total Damage in U.S. Dollars") +
ggtitle("Top Ten Weather Events that caused Injuries") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
injuries_plot = ggplot(injuries, aes(y=Injuries,x=Event_Type)) +
geom_bar(stat = "identity", fill = "blue", las=3) +
xlab("Event Type") + ylab("Total Damage in U.S. Dollars") +
ggtitle("Top Ten Weather Events that caused Injuries") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
injuries_plot = ggplot(injuries, aes(y=Injuries,x=Event_Type)) +
geom_bar(stat = "identity", fill = "blue") +
xlab("Event Type") + ylab("Total Damage in U.S. Dollars") +
ggtitle("Top Ten Weather Events that caused Injuries") +
theme(axis.text.x = element_text(angle = 45))
?reorder
levels(injuries)
injuries = injuries[order(injuries$Injuries,decreasing = TRUE),][1:10,]
fatalities = fatalities[order(fatalities$Fatalities,decreasing = TRUE),][1:10,]
cost = cost[order(cost$Damage,decreasing = TRUE),][1:10,]
injuries = aggregate(INJURIES ~ EVTYPE, FUN = sum, data = tidy_data)
fatalities = aggregate(FATALITIES ~ EVTYPE, FUN = sum, data = tidy_data)
cost = aggregate(PROPDAMAGE+CROPDAMAGE ~ EVTYPE, FUN = sum, data = tidy_data)
names(cost) = c("Event_Type","Damage")
names(injuries) = c("Event_Type","Injuries")
names(fatalities) = c("Event_Type","Fatalities")
injuries = injuries[order(injuries$Injuries,decreasing = TRUE),][1:10,]
fatalities = fatalities[order(fatalities$Fatalities,decreasing = TRUE),][1:10,]
cost = cost[order(cost$Damage,decreasing = TRUE),][1:10,]
injuries = as.factor(injuries$Event_Type)
fatalities = as.factor(fatalities$Event_Type)
cost = as.factor(cost$Event_Type)
levels(injuries)
injuries = aggregate(INJURIES ~ EVTYPE, FUN = sum, data = tidy_data)
fatalities = aggregate(FATALITIES ~ EVTYPE, FUN = sum, data = tidy_data)
cost = aggregate(PROPDAMAGE+CROPDAMAGE ~ EVTYPE, FUN = sum, data = tidy_data)
names(cost) = c("Event_Type","Damage")
names(injuries) = c("Event_Type","Injuries")
names(fatalities) = c("Event_Type","Fatalities")
injuries = injuries[order(injuries$Injuries,decreasing = TRUE),][1:10,]
fatalities = fatalities[order(fatalities$Fatalities,decreasing = TRUE),][1:10,]
cost = cost[order(cost$Damage,decreasing = TRUE),][1:10,]
injuries = factor(injuries$Event_Type, levels = injuries$Event_Type)
fatalities = factor(fatalities$Event_Type, levels = fatalities$Event_Type)
cost = factor(cost$Event_Type, levels = cost$Event_Type)
injuries_plot = ggplot(injuries, aes(y=Injuries,x=Event_Type)) +
geom_bar(stat = "identity", fill = "blue") +
xlab("Event Type") + ylab("Total Damage in U.S. Dollars") +
ggtitle("Top Ten Weather Events that caused Injuries") +
theme(axis.text.x = element_text(angle = 45))
injuries = aggregate(INJURIES ~ EVTYPE, FUN = sum, data = tidy_data)
fatalities = aggregate(FATALITIES ~ EVTYPE, FUN = sum, data = tidy_data)
cost = aggregate(PROPDAMAGE+CROPDAMAGE ~ EVTYPE, FUN = sum, data = tidy_data)
names(cost) = c("Event_Type","Damage")
names(injuries) = c("Event_Type","Injuries")
names(fatalities) = c("Event_Type","Fatalities")
injuries = injuries[order(injuries$Injuries,decreasing = TRUE),][1:10,]
fatalities = fatalities[order(fatalities$Fatalities,decreasing = TRUE),][1:10,]
cost = cost[order(cost$Damage,decreasing = TRUE),][1:10,]
injuries_plot = ggplot(injuries, aes(y=Injuries,x=Event_Type)) +
geom_bar(stat = "identity", fill = "blue") +
xlab("Event Type") + ylab("Total Damage in U.S. Dollars") +
ggtitle("Top Ten Weather Events that caused Injuries") +
theme(axis.text.x = element_text(angle = 45))
injuries_plot
injuries_plot = ggplot(injuries, aes(y=Injuries,x=Event_Type)) +
geom_bar(stat = "identity", fill = "blue") +
xlab("Event Type") + ylab("Total Damage in U.S. Dollars") +
ggtitle("Top Ten Weather Events that caused Injuries") +
theme(axis.text.x = element_text(angle = 45,hjust = 1))
injuries_plot
injuries = aggregate(INJURIES ~ EVTYPE, FUN = sum, data = tidy_data)
fatalities = aggregate(FATALITIES ~ EVTYPE, FUN = sum, data = tidy_data)
cost = aggregate(PROPDAMAGE+CROPDAMAGE ~ EVTYPE, FUN = sum, data = tidy_data)
names(cost) = c("Event_Type","Damage")
names(injuries) = c("Event_Type","Injuries")
names(fatalities) = c("Event_Type","Fatalities")
injuries = injuries[order(injuries$Injuries,decreasing = TRUE),][1:10,]
fatalities = fatalities[order(fatalities$Fatalities,decreasing = TRUE),][1:10,]
cost = cost[order(cost$Damage,decreasing = TRUE),][1:10,]
injuries$Event_Type = factor(injuries$Event_Type, levels = injuries$Event_Type)
fatalities$Event_Type = factor(fatalities$Event_Type, levels = fatalities$Event_Type)
cost$Event_Type = factor(cost$Event_Type, levels = cost$Event_Type)
injuries_plot = ggplot(injuries, aes(y=Injuries,x=Event_Type)) +
geom_bar(stat = "identity", fill = "blue") +
xlab("Event Type") + ylab("Total Damage in U.S. Dollars") +
ggtitle("Top Ten Weather Events that caused Injuries") +
theme(axis.text.x = element_text(angle = 45,hjust = 1))
injuries_plot
fatalities_plot = ggplot(fatalities, aes(y=Fatalities,x=Event_Type)) +
geom_bar(stat = "identity", fill = "blue") +
xlab("Event Type") + ylab("Fatalities") +
ggtitle("Top Ten Weather Events that caused Fatalities") +
theme(axis.text.x = element_text(angle = 45,hjust = 1))
fatalities_plot
cost
damage_plot = ggplot(cost, aes(y=Damage,x=Event_Type)) +
geom_bar(stat = "identity", fill = "blue") +
xlab("Event Type") + ylab("Damage in U.S. Dollars") +
ggtitle("Top Ten Weather Events that caused Injuries") +
theme(axis.text.x = element_text(angle = 45,hjust = 1))
damage_plot
damage_plot = ggplot(cost, aes(y=Damage,x=Event_Type)) +
geom_bar(stat = "identity", fill = "blue") +
xlab("Event Type") + ylab("Damage in U.S. Dollars") +
ggtitle("Top Ten Weather Events that caused Injuries") +
theme(axis.text.x = element_text(angle = 45,hjust = 1))
damage_plot
require("data.table")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
require("R.utils")
require("data.table")
require("ggplot2")
require("plyr")
?mapvalues
Sys.setlocale("LC_ALL","English")
require("R.utils")
require("data.table")
require("ggplot2")
require("plyr")
Sys.setlocale("LC_ALL","English")
require("R.utils")
require("data.table")
require("ggplot2")
require("plyr")
if(!file.exists("Storm_Data.csv.bz2")) {
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2",
destfile = "Storm_Data.csv.bz2")
}
if(!file.exists("Storm_Data.csv")) {
bunzip2("Storm_Data.csv.bz2","Storm_Data.csv")
}
data = fread("Storm_Data.csv")
data = as.data.frame(data)
features = which( names(data) %in% c("EVTYPE","FATALITIES","INJURIES","PROPDMG","PROPDMGEXP","CROPDMG","CROPDMGEXP"))
tidy_data = data[,features]
tidy_data[,1] = as.factor(tidy_data[,1])
tidy_data[,5] = as.factor(tidy_data[,5])
tidy_data[,7] = as.factor(tidy_data[,7])
levels(tidy_data[,5])
levels(tidy_data[,7])
errors=subset(tidy_data, (PROPDMGEXP=="-")|(PROPDMGEXP=="?")|(PROPDMGEXP=="+")|(PROPDMGEXP=="h")|(PROPDMGEXP=="H")|(CROPDMGEXP=="?"))
nrow(errors)
errors[,-1]
tidy_data[,5]=as.factor(toupper(tidy_data[,5]))
tidy_data[,7]=as.factor(toupper(tidy_data[,7]))
new_values_propexp = c("0", "0", "0", "0", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "3", "6")
new_values_cropexp = c("0", "0", "0", "2", "9", "3", "6")
tidy_data[,5] = as.numeric(mapvalues(tidy_data[,5], from = levels(tidy_data[,5]), to = new_values_propexp))
tidy_data[,7] = as.numeric(mapvalues(tidy_data[,7], from = levels(tidy_data[,7]), to = new_values_cropexp))
tidy_data$PROPDAMAGE = tidy_data$PROPDMG * 10^tidy_data$PROPDMGEXP
tidy_data$CROPDAMAGE = tidy_data$CROPDMG * 10^tidy_data$CROPDMGEXP
tidy_data = tidy_data[,-c(4,5,6,7)]
#Create aggregates
injuries = aggregate(INJURIES ~ EVTYPE, FUN = sum, data = tidy_data)
fatalities = aggregate(FATALITIES ~ EVTYPE, FUN = sum, data = tidy_data)
cost = aggregate(PROPDAMAGE+CROPDAMAGE ~ EVTYPE, FUN = sum, data = tidy_data)
#Rename the features
names(cost) = c("Event_Type","Damage")
names(injuries) = c("Event_Type","Injuries")
names(fatalities) = c("Event_Type","Fatalities")
#Order them and take the top ten
injuries = injuries[order(injuries$Injuries,decreasing = TRUE),][1:10,]
fatalities = fatalities[order(fatalities$Fatalities,decreasing = TRUE),][1:10,]
cost = cost[order(cost$Damage,decreasing = TRUE),][1:10,]
#Convert event type to factor
injuries$Event_Type = factor(injuries$Event_Type, levels = injuries$Event_Type)
fatalities$Event_Type = factor(fatalities$Event_Type, levels = fatalities$Event_Type)
cost$Event_Type = factor(cost$Event_Type, levels = cost$Event_Type)
#Create Injuries plot
injuries_plot = ggplot(injuries, aes(y=Injuries,x=Event_Type)) +
geom_bar(stat = "identity", fill = "red") +
xlab("Event Type") + ylab("Injuries") +
ggtitle("Top Ten Weather Events that caused Injuries") +
theme(axis.text.x = element_text(angle = 45,hjust = 1))
#Create fatalities plot
fatalities_plot = ggplot(fatalities, aes(y=Fatalities,x=Event_Type)) +
geom_bar(stat = "identity", fill = "red") +
xlab("Event Type") + ylab("Fatalities") +
ggtitle("Top Ten Weather Events that caused Fatalities") +
theme(axis.text.x = element_text(angle = 45,hjust = 1))
#Create Economic sector damage plot
damage_plot = ggplot(cost, aes(y=Damage,x=Event_Type)) +
geom_bar(stat = "identity", fill = "red") +
xlab("Event Type") + ylab("Damage in U.S. Dollars") +
ggtitle("Most Harmful Events for the Economic Sector") +
theme(axis.text.x = element_text(angle = 45,hjust = 1))
Sys.setlocale("LC_ALL","English")
require("R.utils")
require("data.table")
if(!file.exists("Storm_Data.csv.bz2")) {
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2",
destfile = "Storm_Data.csv.bz2")
}
if(!file.exists("Storm_Data.csv")) {
bunzip2("Storm_Data.csv.bz2","Storm_Data.csv")
}
data = fread("Storm_Data.csv")
data = as.data.frame(data)
features = which( names(data) %in% c("EVTYPE","FATALITIES","INJURIES","PROPDMG","PROPDMGEXP","CROPDMG","CROPDMGEXP"))
tidy_data = data[,features]
tidy_data[,1] = as.factor(tidy_data[,1])
tidy_data[,5] = as.factor(tidy_data[,5])
tidy_data[,7] = as.factor(tidy_data[,7])
levels(tidy_data[,5])
levels(tidy_data[,7])
errors=subset(tidy_data, (PROPDMGEXP=="-")|(PROPDMGEXP=="?")|(PROPDMGEXP=="+")|(PROPDMGEXP=="h")|(PROPDMGEXP=="H")|(CROPDMGEXP=="?"))
nrow(errors)
errors[,-1]
require("plyr")
tidy_data[,5]=as.factor(toupper(tidy_data[,5]))
tidy_data[,7]=as.factor(toupper(tidy_data[,7]))
new_values_propexp = c("0", "0", "0", "0", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "3", "6")
new_values_cropexp = c("0", "0", "0", "2", "9", "3", "6")
tidy_data[,5] = as.numeric(mapvalues(tidy_data[,5], from = levels(tidy_data[,5]), to = new_values_propexp))
tidy_data[,7] = as.numeric(mapvalues(tidy_data[,7], from = levels(tidy_data[,7]), to = new_values_cropexp))
tidy_data$PROPDAMAGE = tidy_data$PROPDMG * 10^tidy_data$PROPDMGEXP
tidy_data$CROPDAMAGE = tidy_data$CROPDMG * 10^tidy_data$CROPDMGEXP
tidy_data = tidy_data[,-c(4,5,6,7)]
require("ggplot2")
options(scipen=100)
#Create aggregates
injuries = aggregate(INJURIES ~ EVTYPE, FUN = sum, data = tidy_data)
fatalities = aggregate(FATALITIES ~ EVTYPE, FUN = sum, data = tidy_data)
cost = aggregate(PROPDAMAGE+CROPDAMAGE ~ EVTYPE, FUN = sum, data = tidy_data)
#Rename the features
names(cost) = c("Event_Type","Damage")
names(injuries) = c("Event_Type","Injuries")
names(fatalities) = c("Event_Type","Fatalities")
#Order them and take the top ten
injuries = injuries[order(injuries$Injuries,decreasing = TRUE),][1:10,]
fatalities = fatalities[order(fatalities$Fatalities,decreasing = TRUE),][1:10,]
cost = cost[order(cost$Damage,decreasing = TRUE),][1:10,]
#Convert event type to factor
injuries$Event_Type = factor(injuries$Event_Type, levels = injuries$Event_Type)
fatalities$Event_Type = factor(fatalities$Event_Type, levels = fatalities$Event_Type)
cost$Event_Type = factor(cost$Event_Type, levels = cost$Event_Type)
cost
cost
install.packages("caret")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
names(training)
hist(training$Superplasticizer)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
t=training[,substr(names(training),1,2)=="IL"]
t
substr(names(training),1,2)=="IL"
names(training)[t]
names(training)[,t]
names(training)
t
names(t)
names(training)
names(t)
?preProcess
prpr=preProcess(t,method="pca")
pr=predict(t,prpr)
pr=predict(prpr)
pr=predict(prpr,t)
summary(pr)
training[1,]
names(t)
ibrary(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL=training[,names(training)[substr(names(training,1,2))=="IL"]]
IL=training[,names(training)[substr(names(training),1,2)=="IL"]]
names(IL)
ILtrain=IL
ILtest=testing[,names(training)[substr(names(testing),1,2)=="IL"]]
preObj <- preProcess(ILtrain, method=c("center", "scale", "pca"), thresh=0.9)
preObj
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ILtrain=training[,names(training)[substr(names(training),1,2)=="IL"]]
grep("IL",training)
grep("IL",training)
names(training)
grep("IL",names(training))
c=grep("IL",names(training))
c=c(1,c)
c
IL=training[,c]
names(IL)
c=c[-14]
c
IL=training[,c]
names(IL)
preObjnonpca <- preProcess(IL, method=""glm, thresh=0.8)
preObjnonpca <- preProcess(IL, method="glm", thresh=0.8)
preObjnonpca <- preProcess(IL, thresh=0.8)
?train
nonpca<- train(IL,method="glm")
nonpca<- train(diagnosis ~ .,data=IL,method="glm")
install.packages("e1071")
nonpca<- train(diagnosis ~ .,data=IL,method="glm")
preObj <- preProcess(IL, method="pca"), thresh=0.8)
preObj <- preProcess(IL, method="pca", thresh=0.8)
prednonpca=predict(preObj,testing)
predpca=predict(preObj,testing)
prednonpca=predict(nonpca,testing
)
summary(predpca)
ILtest=testing[,c]
predpca=predict(preObj,testing)
prednonpca=predict(nonpca,testing)
confusionMatrix(predpca)
summary(predpca)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
substr(names(training),1,2)=="IL"
training=training[,names(training)[substr(names(training),1,2)=="IL"]]
names(training)
c=names(training)
training = adData[ inTrain,]
names(training)
c
c=c("diagnosis",c)
c
training=training[,c]
names(training)
training[1,]
training[7,]
training[1:7,]
testing=testing[,c]
names(testing)
nonpcamodel=train(diagnosis~.,data=training,method="glm")
nonpcapred=predict(nonpcamodel,testing)
names(testing)
nonpcapred=predict(nonpcamodel,testing[,-1])
cunfusionMatrix(testing[,1],nonpcapred)
confusionMatrix(testing[,1],nonpcapred)
names(training)
pcapreobj=preProcess(training[,-1],method=c("center","scale","pca"),,thresh=0.8)
preprtr=predict(pcapreobj,training[,-1])
preprtr=predict(pcapreobj,testing[,-1])
preprtr=predict(pcapreobj,training[,-1])
preprte=predict(pcapreobj,testing[,-1])
preprte
model=train(training$diagnosis ~.,data=preprtr,method="glm")
pca=confusionMatrix(testing[,1],predict(model,preprte))
pca
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
t=preProcess(training,method=c("scale","center","pca"),thres=0.8)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training=training[,names(training)[substr(names(training),1,2)=="IL"]]
names(training)
t=preProcess(training,method=c("scale","center","pca"),thres=0.8)
t
load(model1)
setwd("E:/Desktop\ML Projects/Machine-Learning-Coursera-Project")
setwd("E:/Desktop/ML Projects/Machine-Learning-Coursera-Project")
load("model1")
load("model2")
load("model3")
load("FinalModel")
Sys.setlocale("LC_ALL","English")
require("caret")
require("data.table")
training = fread("Human_Activity_Training.csv",na.strings=c("NA",""))
training = as.data.frame(training)
testing = fread("Human_Activity_Testing.csv",na.strings=c("NA",""))
testing = as.data.frame(testing)
tidy_training=training[,which(as.numeric(colSums(is.na(training)))==0)]
tidy_testing=training[,which(as.numeric(colSums(is.na(testing)))==0)]
tidy_training=tidy_training[,-c(1:7)]
tidy_testing=tidy_testing[,-c(1:7)]
inTrain1 = sample(1:nrow(tidy_training), round(nrow(tidy_training)/3), replace = FALSE)
train1 = tidy_training[inTrain1,]
validation1 = tidy_training[-inTrain1,]
inTrain2 = sample(1:nrow(tidy_training)[-inTrain], round(nrow(tidy_training)/3), replace = FALSE)
train2 = tidy_training[inTrain2,]
validation2 = tidy_training[-inTrain2,]
inTrain3 = sample(1:nrow(tidy_training)[-c(inTrain1,inTrain2)], nrow(tidy_training)[-c(inTrain1,inTrain2)], replace = FALSE)
train3 = tidy_training[inTrain3,]
validation3 = tidy_training[-inTrain3,]
inTrain1 = sample(1:nrow(tidy_training), round(nrow(tidy_training)/3), replace = FALSE)
train1 = tidy_training[inTrain1,]
validation1 = tidy_training[-inTrain1,]
inTrain2 = sample(1:nrow(tidy_training)[-inTrain], round(nrow(tidy_training)/3), replace = FALSE)
train2 = tidy_training[inTrain2,]
validation2 = tidy_training[-inTrain2,]
inTrain2 = sample(1:nrow(tidy_training)[-inTrain1], round(nrow(tidy_training)/3), replace = FALSE)
train2 = tidy_training[inTrain2,]
validation2 = tidy_training[-inTrain2,]
inTrain3 = sample(1:nrow(tidy_training)[-c(inTrain1,inTrain2)], nrow(tidy_training)[-c(inTrain1,inTrain2)], replace = FALSE)
train3 = tidy_training[inTrain3,]
validation3 = tidy_training[-inTrain3,]
model1
library(randomForest)
confusionMatrix(model1,predict(model1,validation1))
names(validation1)
confusionMatrix(validation1$classe,predict(model1,validation1))
confusionMatrix(validation2$classe,predict(model2,validation2))
confusionMatrix(validation3$classe,predict(model3,validation3))
validation3
inTrain3 = sample(1:nrow(tidy_training)[-c(inTrain1,inTrain2)], nrow(tidy_training)[-c(inTrain1,inTrain2)], replace = FALSE)
train3 = tidy_training[inTrain3,]
validation3 = tidy_training[-inTrain3,]
confusionMatrix(validation3$classe,predict(model3,validation3))
inTrain3 = sample(1:nrow(tidy_training)[-c(inTrain1,inTrain2)], nrow(tidy_training)[-c(inTrain1,inTrain2)], replace = FALSE)
inTrain3
train3 = tidy_training[inTrain3,]
validation3 = tidy_training[-inTrain3,]
validation3
length(inTrain3)
length(inTrain2)
length(inTrain1)
nrow(tidy_training)[-c(inTrain1,inTrain2)]
-c(inTrain1,inTrain2)
nrow(tidy_training)-inTrain1-inTrain2
nrow(tidy_training)-nrow(inTrain1)-nrow(inTrain2)
